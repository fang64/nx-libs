XCOMM $XdotOrg: xc/config/cf/Imake.cf,v 1.12 2005/11/08 06:33:24 jkj Exp $
XCOMM $Xorg: Imake.cf,v 1.4 2000/08/17 19:41:45 cpqbld Exp $
/*
 * To add support for another platform:
 * 
 *     1.  Identify a machine-specific cpp symbol.  If your preprocessor 
 *         does not have any built in, you will need to add the symbol to the
 *         cpp_argv table in config/imake/imakemdep.h and rebuild imake with
 *         the BOOTSTRAPCFLAGS variable set (see the macII for an example).
 *
 *     2.  Add all machine-specific cpp symbols (either defined by you or by
 *         the preprocessor or compiler) to the predefs table in 
 *         config/imake/imakemdep.h.
 *
 *     3.  But a new #ifdef block below that defines MacroIncludeFile and
 *         MacroFile for your new platform and then #undefs the machine-
 *         specific preprocessor symbols (to avoid problems with file names).
 *
 *     4.  Create a .cf file with the name given by MacroFile.
 */
XCOMM $XFree86: xc/config/cf/Imake.cf,v 3.88 2003/12/16 21:30:21 herrb Exp $

/* Systems based on kernel of FreeBSD */
#if defined(__FreeBSD_kernel__)
#define KFreeBSDArchitecture
#endif

#if defined(linux) || defined(__GLIBC__)
# define MacroIncludeFile <linux.cf>
# define MacroFile linux.cf
# undef linux
# ifdef __linux__
#  define LinuxArchitecture
# endif
# ifdef i386
#  ifndef i386Architecture
#   define i386Architecture
#  endif
#  undef i386
XCOMM Keep cpp from replacing path elements containing i486/i586/i686
#  ifdef i486
#  ifndef i386Architecture
#   define i386Architecture
#  endif
#   undef i486
#  endif
#  ifdef i586
#  ifndef i386Architecture
#   define i386Architecture
#  endif
#   undef i586
#  endif
#  ifdef i686
#  ifndef i386Architecture
#   define i386Architecture
#  endif
#   undef i686
#  endif
#  ifdef k6
#  ifndef i386Architecture
#   define i386Architecture
#  endif
#   undef k6
#  endif
# endif /* k6 */
# ifdef __i386__
#  ifndef i386Architecture
#   define i386Architecture
#  endif
#  undef __i386__
# endif /* __i386__ */
# ifdef __i486__
#  ifndef i386Architecture
#   define i386Architecture
#  endif
#  undef __i486__
# endif /* __i486__ */
# ifdef __i586__
#  ifndef i386Architecture
#   define i386Architecture
#  endif
#  undef __i586__
# endif /* __i586__ */
# ifdef __i686__
#  ifndef i386Architecture
#   define i386Architecture
#  endif
#  undef __i686__
# endif /* __i686__ */
# ifdef __k6__
#  ifndef i386Architecture
#   define i386Architecture
#  endif
#  undef __k6__
# endif /* __k6__ */
# ifdef __i386
#  ifndef i386Architecture
#   define i386Architecture
#  endif
#  undef __i386
# endif /* __i386 */
# ifdef __i486
#  ifndef i386Architecture
#   define i386Architecture
#  endif
#  undef __i486
# endif /* __i486 */
# ifdef __i586
#  ifndef i386Architecture
#   define i386Architecture
#  endif
#  undef __i586
# endif /* __i586 */
# ifdef __i686
#  ifndef i386Architecture
#   define i386Architecture
#  endif
#  undef __i686
# endif /* __i686 */
# ifdef __k6
#  ifndef i386Architecture
#   define i386Architecture
#  endif
#  undef __k6
# endif /* __k6 */
/* Keep this order! s390x has also __s390__ defined */
# if defined(__s390x__)
#  define s390xArchitecture
#  undef __s390x__
#  undef __s390__
# endif
# ifdef __s390__
#   define s390Architecture
#  undef __s390__
# endif /* s390 */
# ifdef __alpha
#  define AlphaArchitecture
#  undef __alpha
# endif /* __alpha */
# ifdef __alpha__
#  ifndef AlphaArchitecture
#   define AlphaArchitecture
#  endif
#  undef __alpha__
# endif /* __alpha__ */
# ifdef __arm__
#  define Arm32Architecture
#  undef arm
#  undef __arm
#  undef __arm__
#  if defined(__ARMEB__)
#   define Arm32ebArchitecture
#  endif
#  undef __ARMEB__
# endif
# ifdef __aarch64__
#  define Arm64Architecture
# endif
# ifdef mc68000
#  define Mc68020Architecture
#  undef mc68000
# endif /* mc68000 */
# if defined (powerpc) && !defined(__powerpc64__) && !defined (powerpc64)
#  define PpcArchitecture
#  undef powerpc
# endif
# if defined (__powerpc__) && !defined(__powerpc64__) && !defined (powerpc64)
#  ifndef PpcArchitecture
#   define PpcArchitecture
#  endif
#  undef __powerpc__
# endif
# ifdef __powerpc64__
#  ifndef Ppc64Architecture
#   define Ppc64Architecture
#  endif
#  undef __powerpc64__
# endif
# ifdef sparc
#  define SparcArchitecture
#  undef sparc
# endif
# ifdef __sparc__
#  ifndef SparcArchitecture
#   define SparcArchitecture
#  endif
#  undef __sparc__
# endif
# ifdef ia64 
#  define ia64Architecture
#  undef ia64 
# endif
# ifdef __ia64__
#  ifndef ia64Architecture
#   define ia64Architecture
#  endif
#  undef __ia64__
# endif
# if defined(mips) || defined(__mips__)
#  define MipsArchitecture
#  undef mips
#  undef __mips__
#  if defined(MIPSEL) || defined(_MIPSEL)
#   define MipselArchitecture
#  endif
#  undef MIPSEL
#  undef _MIPSEL
# endif
# ifdef __hppa__
#  ifndef HPArchitecture
#   define HPArchitecture
#  endif
#  undef __hppa__
# endif /* __hppa__ */
# ifdef __sh__
#  ifndef SuperHArchitecture
#   define SuperHArchitecture
#  endif
#  ifdef __BIG_ENDIAN__
#   ifndef SuperHebArchitecture
#    define SuperHebArchitecture
#   endif
#  endif
#  undef __sh__
# endif /* __sh__ */
# if defined(__SH3__) || defined(__sh3__)
#  ifndef SuperH3Architecture
#   define SuperH3Architecture
#  endif
#  undef __SH3__
#  undef __sh3__
# endif /* __SH3__ or __sh3__ */
# ifdef __SH4__
#  ifdef __SH4_NOFPU__
#   ifndef SuperH4NOFPUArchitecture
#    define SuperH4NOFPUArchitecture
#   endif
#   undef __SH4_NOFPU__
#  else
#   ifndef SuperH4Architecture
#    define SuperH4Architecture
#   endif
#  endif
#  undef __SH4__
# endif /* __SH4__ */
/* for compatibility with 3.3.x */
# ifdef PpcArchitecture
#  define PowerPCArchitecture
# endif
# if defined(__s390x__)
#  define s390xArchitecture
#  undef __s390x__
# endif
# if defined(__amd64__) || defined (__x86_64__)
#  undef __amd64__
#  undef __x86_64__
#  define AMD64Architecture
# endif
# if defined(amd64__) || defined (x86_64__)
#  undef amd64__
#  undef x86_64__
#  ifndef AMD64Architecture
#   define AMD64Architecture
#  endif
# endif
#endif /* linux || __GLIBC__ */

/* Systems with GNU libc and userland */
#if defined(__GNU__)
#define GNUArchitecture
#define MacroIncludeFile <gnu.cf>
#define MacroFile gnu.cf
#ifdef __i386__
#define i386Architecture
#endif
#endif

#ifdef SparcArchitecture
# if defined(__sparc_v9) || defined(__arch64__)
#  define Sparc64Architecture
# endif
#endif

#ifndef MacroIncludeFile
XCOMM WARNING:  Imake.cf not configured; guessing at definitions!!!
XCOMM This might mean that BOOTSTRAPCFLAGS was not set when building imake.
#define MacroIncludeFile <generic.cf>
#define MacroFile generic.cf
#endif
